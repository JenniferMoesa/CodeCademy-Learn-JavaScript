TRUTHY AND FALSY ASSIGNMENT

Truthy and falsy evaluations open a world of short-hand possibilities!

Say you have a website and want to take a user’s username to make a personalized greeting. 
Sometimes, the user does not have an account, making the username variable falsy.
The code below checks if username is defined and assigns a default string if it is not:

let username = '';
let defaultName;
 
if (username) {
  defaultName = username;
} else {
  defaultName = 'Stranger';
}
 
console.log(defaultName); // Prints: Stranger


If you combine your knowledge of logical operators you can use a short-hand for the code above.
In a boolean condition, JavaScript assigns the truthy value to a variable if you use the || operator in your assignment:

let username = '';
let defaultName = username || 'Stranger';
 
console.log(defaultName); // Prints: Stranger

Because || or statements check the left-hand condition first,
the variable defaultName will be assigned the actual value of username if it is truthy,
and it will be assigned the value of 'Stranger' if username is falsy. 
This concept is also referred to as short-circuit evaluation.

------------------------


--------------------------------------------------------------------------------------------------------------------------

TERNARY OPERATOR (ternaire, driedelig)

In the spirit of using short-hand syntax, we can use a ternary operator to simplify an if...else statement.

Take a look at the if...else statement example:

let isNightTime = true;
 
if (isNightTime) {
  console.log('Turn on the lights!');
} else {
  console.log('Turn off the lights!');
}

We can use a ternary operator to perform the same functionality:

isNightTime ? console.log('Turn on the lights!') : console.log('Turn off the lights!');
In the example above:

The condition, isNightTime, is provided before the ?.
Two expressions follow the ? and are separated by a colon :.
If the condition evaluates to true, the first expression executes.
If the condition evaluates to false, the second expression executes.
Like if...else statements, ternary operators can be used for conditions which evaluate to true or false.

Instructions
1. Refactor, or edit, the first if...else block to use a ternary operator.

2. Refactor the second if...else block to use a ternary operator.

3. Refactor the third if...else block to use a ternary operator.

let isLocked = false;

// if (isLocked) {
//   console.log('You will need a key to open the door.');
// } else {
//   console.log('You will not need a key to open the door.');
// }

isLocked ? console.log('You will need a key to open the door.')
: console.log('You will not need a key to open the door.');

let isCorrect = true;

// if (isCorrect) {
//   console.log('Correct!');
// } else {
//   console.log('Incorrect!');
// }

isCorrect ? console.log('Correct!')
: console.log('Incorrect!');

let favoritePhrase = 'Love That!';

// if (favoritePhrase === 'Love That!') {
//   console.log('I love that!');
// } else {
//   console.log("I don't love that!");
// }

favoritePhrase === "Love That!" ? console.log("I love that!")
: console.log("I don't love that!");


console
You will not need a key to open the door.
Correct!
I love that!

-------------------------------------------------------------------------------------------------------

ELSE IF STATEMENTS

We can add more conditions to our if...else with an else if statement. 
The else if statement allows for more than two possible outcomes. 
You can add as many else if statements as you’d like, to make more complex conditionals!

The else if statement always comes after the if statement and before the else statement. 
The else if statement also takes a condition. Let’s take a look at the syntax:

let stopLight = 'yellow';
 
if (stopLight === 'red') {
  console.log('Stop!');
} else if (stopLight === 'yellow') {
  console.log('Slow down.');
} else if (stopLight === 'green') {
  console.log('Go!');
} else {
  console.log('Caution, unknown!');
}
The else if statements allow you to have multiple possible outcomes. 
if/else if/else statements are read from top to bottom, so the first condition that evaluates to true from the top to bottom is the block that gets executed.

In the example above, since stopLight === 'red' evaluates to false and stopLight === 'yellow' evaluates to true, 
the code inside the first else if statement is executed. The rest of the conditions are not evaluated.
If none of the conditions evaluated to true, then the code in the else statement would have executed.

Instructions
1. Let’s create a program that keeps track of the way the environment changes with the seasons. Write a conditional statement to make this happen!

In main.js there is already an if...else statement in place. Let’s add an else if statement that checks if season is equal to 'winter'.

Inside the code block of the else if statement, add a console.log() that prints the string 'It\'s winter! Everything is covered in snow.'.

2.Add another else if statement that checks if season is equal to 'fall'.

Inside the code block of the else if statement you just created, add a console.log() that prints the string 'It\'s fall! Leaves are falling!'.

3. Add a final else if statement that checks if season is equal to 'summer'.

Inside the code block of the else if statement you just created, add a console.log() that prints the string 'It\'s sunny and warm because it\'s summer!'.


let season = 'summer';

if (season === 'spring') {
  console.log('It\'s spring! The trees are budding!');
} else if (season === 'winter') {
  console.log('It\'s winter! Everything is covered in snow.');
} else if (season === 'fall') {
  console.log('It\'s fall! Leaves are falling!');
} else if (season === 'summer') {
  console.log('It\'s sunny and warm because it\'s summer!');
} else {
  console.log('Invalid season.');
}

CONSOLE
It's sunny and warm because it's summer!

---------------------------------------------------------------------------------------------------







