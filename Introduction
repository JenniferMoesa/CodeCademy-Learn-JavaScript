VARIABLES
Variables
In programming, a variable is a container for a value. You can think of variables as little containers for information that live in a computer’s memory. 
Information stored in variables, such as a username, account number, or even personalized greeting can then be found in memory.

Variables also provide a way of labeling data with a descriptive name, so our programs can be understood more clearly by the reader and ourselves.

In short, variables label and store data in memory. There are only a few things you can do with variables:

Create a variable with a descriptive name.
Store or update information stored in a variable.
Reference or “get” information stored in a variable.
It is important to distinguish that variables are not values; they contain values and represent them with a name. 
Observe the diagram with the colored boxes. Each box represents variables; the values are represented by the content, and the name is represented with the label.

In this lesson, we will cover how to use the var, let, and const keywords to create variables.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE A VARIABLE: VAR

There were a lot of changes introduced in the ES6 version of JavaScript in 2015. 
One of the biggest changes was two new keywords, let and const, to create, or declare, variables. 
Prior to the ES6, programmers could only use the var keyword to declare variables.

var myName = 'Arya';
console.log(myName);
// Output: Arya
Let’s consider the example above:

var, short for variable, is a JavaScript keyword that creates, or declares, a new variable.
myName is the variable’s name. Capitalizing in this way is a standard convention in JavaScript called camel casing. 
In camel casing you group words into one, the first word is lowercase, then every word that follows will have its first letter uppercased. (e.g. camelCaseEverything).
= is the assignment operator. It assigns the value ('Arya') to the variable (myName).
'Arya' is the value assigned (=) to the variable myName. You can also say that the myName variable is initialized with a value of 'Arya'.
After the variable is declared, the string value 'Arya' is printed to the console by referencing the variable name: console.log(myName).

There are a few general rules for naming variables:
* Variable names cannot start with numbers.
* Variable names are case sensitive, so myName and myname would be different variables.
  It is bad practice to create two variables that have the same name using different cases.
* Variable names cannot be the same as keywords. For a comprehensive list of keywords check out MDN’s keyword documentation.

Note: In the next exercises, we will learn why ES6’s let and const are the preferred variable keywords by many programmers.
Because there is still a ton of code written prior to ES6, it’s helpful to be familiar with the pre-ES6 var keyword.

If you want to learn more about var and the quirks associated with it, check out the MDN var documentation.

Instructions
1. Declare a variable named favoriteFood using the var keyword and assign to it the string 'pizza'.

2. Declare a variable named numOfSlices using the var keyword and assign to it the number 8.

3. Under the numOfSlices variable, use console.log() to print the value saved to favoriteFood.

On the following line, use console.log() to print the value saved to numOfSlices.


var favoriteFood = 'pizza';

var numOfSlices = 8;
console.log(favoriteFood);
console.log(numOfSlices);

----------------------------------------------------------------------------------------------------------------------------------

CREATE A VARIABLE; LET

As mentioned in the previous exercise, the let keyword was introduced in ES6. 
The let keyword signals that the variable can be reassigned a different value. Take a look at the example:

let meal = 'Enchiladas';
console.log(meal); // Output: Enchiladas
meal = 'Burrito';
console.log(meal); // Output: Burrito

Another concept that we should be aware of when using let (and even var) is that we can declare a variable without assigning the variable a value. 
In such a case, the variable will be automatically initialized with a value of undefined:

let price;
console.log(price); // Output: undefined
price = 350;
console.log(price); // Output: 350

Notice in the example above:

If we don’t assign a value to a variable declared using the let keyword, it automatically has a value of undefined.
We can reassign the value of the variable.

Instructions
1. Create a let variable called changeMe and set it equal to the boolean true.

2. On the line after changeMe is declared, set the value of changeMe to be the boolean false.

To check if changeMe was reassigned, log the value saved to changeMe to the console.

et changeMe = true;
changeMe = false;
console.log(changeMe);

----------------------------------------------------------------------------------------------------------------------------------


